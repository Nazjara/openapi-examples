openapi: 3.0.3
info:
  title: OpenAPI Example
  description: OpenAPI Example
  version: 1.0.0
  termsOfService: https://example.com/terms
  contact:
    name: Nazar Lipkovskyy
    url: https://example.com
    email: nazjara@gmail.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://dev.example.com
    description: Development Server
  - url: https://qa.example.com
    description: QA Server
  - url: https://prod.example.com
    description: Production Server
paths:
  /v1/customer:
    get:
      summary: Get all customers
      description: Get all **customers** in the system
      tags:
        - Customer
      operationId: listCustomersV1
      parameters:
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
      responses:
        200:
          description: Get all customers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/customerPagedList"
    post:
      summary: Create customer
      description: Create **customer**
      tags:
        - Customer
      operationId: createCustomerV1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customer"
      responses:
        201:
          description: Customer created
          headers:
            Location:
              description: Location of the created customer
              schema:
                type: string
                format: uri
                example: https://example.com/v1/customer/{assignedId}
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/customer"
        400:
          description: Bad request
        409:
          description: Conflict
  /v1/customer/{customerId}:
    get:
      summary: Find customer by id
      description: Find **customer** by id
      tags:
        - Customer
      operationId: getCustomerByIdV1
      parameters:
      - $ref: "#/components/parameters/customerId"
      responses:
        200:
          description: Find customer by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/customer"
        404:
          description: Not found
    put:
      summary: Update customer by id
      description: Update **customer** by id
      tags:
        - Customer
      operationId: updateCustomerByIdV1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customer"
      parameters:
        - $ref: "#/components/parameters/customerId"
      responses:
        200:
          description: Customer updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/customer"
        400:
          description: Bad request
        404:
          description: Not found
        409:
          description: Conflict
    delete:
      summary: Delete customer by id
      description: Delete **customer** by id
      tags:
        - Customer
      operationId: deleteCustomerByIdV1
      parameters:
        - $ref: "#/components/parameters/customerId"
      responses:
        204:
          description: Delete customer by id
        404:
          description: Not found
  /v1/beer:
    get:
      summary: Get list of beers
      description: Get list of **beers** in the system
      tags:
        - Beer
      operationId: listBeersV1
      parameters:
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
      responses:
        200:
          description: Get list of beers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/beerPagedList"
        404:
          description: Beers not found
    post:
      summary: Create beer
      description: Create **beer**
      tags:
        - Beer
      operationId: createBeerV1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/beer"
      responses:
        201:
          description: Beer created
          headers:
            Location:
              description: Location of the created beer
              schema:
                type: string
                format: uri
                example: https://example.com/v1/beer/{assignedId}
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/customer"
        400:
          description: Bad request
        409:
          description: Conflict
  /v1/beer/{beerId}:
    get:
      summary: Find beer by id
      description: Find **beer** by id
      tags:
        - Beer
      operationId: getBeerByIdV1
      parameters:
        - $ref: "#/components/parameters/beerId"
      responses:
        200:
          description: Find beer by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/beer"
        404:
          description: Not found
    put:
      summary: Update beer by id
      description: Update **beer** by id
      tags:
        - Beer
      operationId: updateBeerByIdV1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/beer"
      parameters:
        - $ref: "#/components/parameters/beerId"
      responses:
        200:
          description: Beer updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/beer"
        400:
          description: Bad request
        404:
          description: Not found
        409:
          description: Conflict
    delete:
      summary: Delete beer by id
      description: Delete **beer** by id
      tags:
        - Beer
      operationId: deleteBeerByIdV1
      parameters:
        - $ref: "#/components/parameters/beerId"
      responses:
        204:
          description: Delete beer by id
        404:
          description: Not found
components:
  schemas:
    customerPagedList:
      type: object
      allOf:
        - $ref: "#/components/schemas/pagedResponse"
      properties:
        beers:
          $ref: "#/components/schemas/customerList"
    customerList:
      type: array
      minItems: 1
      maxItems: 100
      items:
        $ref: "#/components/schemas/customer"
    customer:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          description: Customer id
          format: uuid
        firstName:
          type: string
          description: Customer name
          minLength: 2
          maxLength: 100
        lastName:
          type: string
          description: Customer surname
          minLength: 2
          maxLength: 100
        address:
          $ref: "#/components/schemas/address"
    address:
      type: object
      properties:
        country:
          type: string
          example: Ukraine
        city:
          type: string
          example: Lviv
        zipCode:
          type: string
          example: 79000
        stateCode:
          type: string
          minLength: 2
          maxLength: 2
          description: 2 letter state code
          enum:
            - AL
            - AK
            - AZ
            - AR
            - CA
    beerPagedList:
      type: object
      allOf:
        - $ref: "#/components/schemas/pagedResponse"
      properties:
        beers:
          $ref: "#/components/schemas/beerList"
    beerList:
      type: array
      minItems: 1
      maxItems: 100
      items:
        $ref: "#/components/schemas/beer"
    beer:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          description: Beer id
          format: uuid
        name:
          type: string
        style:
          type: string
          enum:
            - ALE
            - PALE_ALE
            - IPA
            - WHEAT
            - LAGER
        upc:
          type: string
        price:
          type: number
          format: float
        quantityOnHand:
          type: number
          format: int32
        brewery:
          $ref: "#/components/schemas/brewery"
    brewery:
      type: object
      properties:
        name:
          type: string
        location:
          type: string
    pagedResponse:
      type: object
      properties:
        pageable:
          $ref: '#/components/schemas/pagedResponse_pageable'
        totalPages:
          type: integer
          format: int32
        last:
          type: boolean
        totalElements:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        number:
          type: integer
          format: int32
        numberOfElements:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/pagedResponse_pageable_sort'
        first:
          type: boolean
    pagedResponse_pageable_sort:
      type: object
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean
    pagedResponse_pageable:
      type: object
      properties:
        sort:
          $ref: '#/components/schemas/pagedResponse_pageable_sort'
        offset:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
  parameters:
    pageNumber:
      name: pageNumber
      in: query
      description: Page number
      required: true
      schema:
        type: integer
        format: int32
    pageSize:
      name: pageSize
      in: query
      description: Page size
      required: false
      schema:
        type: integer
        format: int32
        default: 20
    customerId:
      name: customerId
      in: path
      description: Customer id
      required: true
      schema:
        type: string
        format: uuid
    beerId:
      name: beerId
      in: path
      description: Beer id
      required: true
      schema:
        type: string
        format: uuid