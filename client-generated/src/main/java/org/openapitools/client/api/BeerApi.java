/*
 * OpenAPI Example
 * OpenAPI Example
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nazjara@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Beer;
import org.openapitools.client.model.BeerPagedList;
import org.openapitools.client.model.Customer;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BeerApi {
    private ApiClient localVarApiClient;

    public BeerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BeerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createBeerV1
     * @param beer  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Beer created </td><td>  * Location - Location of the created beer <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBeerV1Call(Beer beer, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = beer;

        // create path and map variables
        String localVarPath = "/v1/beer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth", "jwtAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBeerV1ValidateBeforeCall(Beer beer, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'beer' is set
        if (beer == null) {
            throw new ApiException("Missing the required parameter 'beer' when calling createBeerV1(Async)");
        }
        

        okhttp3.Call localVarCall = createBeerV1Call(beer, _callback);
        return localVarCall;

    }

    /**
     * Create beer
     * Create **beer**
     * @param beer  (required)
     * @return Customer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Beer created </td><td>  * Location - Location of the created beer <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public Customer createBeerV1(Beer beer) throws ApiException {
        ApiResponse<Customer> localVarResp = createBeerV1WithHttpInfo(beer);
        return localVarResp.getData();
    }

    /**
     * Create beer
     * Create **beer**
     * @param beer  (required)
     * @return ApiResponse&lt;Customer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Beer created </td><td>  * Location - Location of the created beer <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Customer> createBeerV1WithHttpInfo(Beer beer) throws ApiException {
        okhttp3.Call localVarCall = createBeerV1ValidateBeforeCall(beer, null);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create beer (asynchronously)
     * Create **beer**
     * @param beer  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Beer created </td><td>  * Location - Location of the created beer <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBeerV1Async(Beer beer, final ApiCallback<Customer> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBeerV1ValidateBeforeCall(beer, _callback);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteBeerByIdV1
     * @param beerId Beer id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete beer by id </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBeerByIdV1Call(UUID beerId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/beer/{beerId}"
            .replaceAll("\\{" + "beerId" + "\\}", localVarApiClient.escapeString(beerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth", "jwtAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBeerByIdV1ValidateBeforeCall(UUID beerId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'beerId' is set
        if (beerId == null) {
            throw new ApiException("Missing the required parameter 'beerId' when calling deleteBeerByIdV1(Async)");
        }
        

        okhttp3.Call localVarCall = deleteBeerByIdV1Call(beerId, _callback);
        return localVarCall;

    }

    /**
     * Delete beer by id
     * Delete **beer** by id
     * @param beerId Beer id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete beer by id </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteBeerByIdV1(UUID beerId) throws ApiException {
        deleteBeerByIdV1WithHttpInfo(beerId);
    }

    /**
     * Delete beer by id
     * Delete **beer** by id
     * @param beerId Beer id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete beer by id </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteBeerByIdV1WithHttpInfo(UUID beerId) throws ApiException {
        okhttp3.Call localVarCall = deleteBeerByIdV1ValidateBeforeCall(beerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete beer by id (asynchronously)
     * Delete **beer** by id
     * @param beerId Beer id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete beer by id </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBeerByIdV1Async(UUID beerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBeerByIdV1ValidateBeforeCall(beerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBeerByIdV1
     * @param beerId Beer id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Find beer by id </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBeerByIdV1Call(UUID beerId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/beer/{beerId}"
            .replaceAll("\\{" + "beerId" + "\\}", localVarApiClient.escapeString(beerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth", "jwtAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBeerByIdV1ValidateBeforeCall(UUID beerId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'beerId' is set
        if (beerId == null) {
            throw new ApiException("Missing the required parameter 'beerId' when calling getBeerByIdV1(Async)");
        }
        

        okhttp3.Call localVarCall = getBeerByIdV1Call(beerId, _callback);
        return localVarCall;

    }

    /**
     * Find beer by id
     * Find **beer** by id
     * @param beerId Beer id (required)
     * @return Beer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Find beer by id </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Beer getBeerByIdV1(UUID beerId) throws ApiException {
        ApiResponse<Beer> localVarResp = getBeerByIdV1WithHttpInfo(beerId);
        return localVarResp.getData();
    }

    /**
     * Find beer by id
     * Find **beer** by id
     * @param beerId Beer id (required)
     * @return ApiResponse&lt;Beer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Find beer by id </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Beer> getBeerByIdV1WithHttpInfo(UUID beerId) throws ApiException {
        okhttp3.Call localVarCall = getBeerByIdV1ValidateBeforeCall(beerId, null);
        Type localVarReturnType = new TypeToken<Beer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find beer by id (asynchronously)
     * Find **beer** by id
     * @param beerId Beer id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Find beer by id </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBeerByIdV1Async(UUID beerId, final ApiCallback<Beer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBeerByIdV1ValidateBeforeCall(beerId, _callback);
        Type localVarReturnType = new TypeToken<Beer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listBeersV1
     * @param pageNumber Page number (required)
     * @param pageSize Page size (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get list of beers </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Beers not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBeersV1Call(Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/beer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listBeersV1ValidateBeforeCall(Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling listBeersV1(Async)");
        }
        

        okhttp3.Call localVarCall = listBeersV1Call(pageNumber, pageSize, _callback);
        return localVarCall;

    }

    /**
     * Get list of beers
     * Get list of **beers** in the system
     * @param pageNumber Page number (required)
     * @param pageSize Page size (optional, default to 20)
     * @return BeerPagedList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get list of beers </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Beers not found </td><td>  -  </td></tr>
     </table>
     */
    public BeerPagedList listBeersV1(Integer pageNumber, Integer pageSize) throws ApiException {
        ApiResponse<BeerPagedList> localVarResp = listBeersV1WithHttpInfo(pageNumber, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get list of beers
     * Get list of **beers** in the system
     * @param pageNumber Page number (required)
     * @param pageSize Page size (optional, default to 20)
     * @return ApiResponse&lt;BeerPagedList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get list of beers </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Beers not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BeerPagedList> listBeersV1WithHttpInfo(Integer pageNumber, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listBeersV1ValidateBeforeCall(pageNumber, pageSize, null);
        Type localVarReturnType = new TypeToken<BeerPagedList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of beers (asynchronously)
     * Get list of **beers** in the system
     * @param pageNumber Page number (required)
     * @param pageSize Page size (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get list of beers </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Beers not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBeersV1Async(Integer pageNumber, Integer pageSize, final ApiCallback<BeerPagedList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listBeersV1ValidateBeforeCall(pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<BeerPagedList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBeerByIdV1
     * @param beerId Beer id (required)
     * @param beer  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Beer updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBeerByIdV1Call(UUID beerId, Beer beer, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = beer;

        // create path and map variables
        String localVarPath = "/v1/beer/{beerId}"
            .replaceAll("\\{" + "beerId" + "\\}", localVarApiClient.escapeString(beerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth", "jwtAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBeerByIdV1ValidateBeforeCall(UUID beerId, Beer beer, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'beerId' is set
        if (beerId == null) {
            throw new ApiException("Missing the required parameter 'beerId' when calling updateBeerByIdV1(Async)");
        }
        
        // verify the required parameter 'beer' is set
        if (beer == null) {
            throw new ApiException("Missing the required parameter 'beer' when calling updateBeerByIdV1(Async)");
        }
        

        okhttp3.Call localVarCall = updateBeerByIdV1Call(beerId, beer, _callback);
        return localVarCall;

    }

    /**
     * Update beer by id
     * Update **beer** by id
     * @param beerId Beer id (required)
     * @param beer  (required)
     * @return Beer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Beer updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public Beer updateBeerByIdV1(UUID beerId, Beer beer) throws ApiException {
        ApiResponse<Beer> localVarResp = updateBeerByIdV1WithHttpInfo(beerId, beer);
        return localVarResp.getData();
    }

    /**
     * Update beer by id
     * Update **beer** by id
     * @param beerId Beer id (required)
     * @param beer  (required)
     * @return ApiResponse&lt;Beer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Beer updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Beer> updateBeerByIdV1WithHttpInfo(UUID beerId, Beer beer) throws ApiException {
        okhttp3.Call localVarCall = updateBeerByIdV1ValidateBeforeCall(beerId, beer, null);
        Type localVarReturnType = new TypeToken<Beer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update beer by id (asynchronously)
     * Update **beer** by id
     * @param beerId Beer id (required)
     * @param beer  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Beer updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBeerByIdV1Async(UUID beerId, Beer beer, final ApiCallback<Beer> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBeerByIdV1ValidateBeforeCall(beerId, beer, _callback);
        Type localVarReturnType = new TypeToken<Beer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
